openapi: 3.0.3
info:
  title: BIV.Zhaby
  version: '1.0'
servers:
  - url: http://localhost:8082/

security:
  - bearerAuth: []
paths:

  /property/{insuranceId}:
    post:
      operationId: createProperty
      tags:
        - Property
      description: Создание Property
      parameters:
        - name: insuranceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '500':
          description: Database fail

  /property/type:
    post:
      operationId: createPropertyType
      tags:
        - Property
      description: Добавление типа свойства
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyTypeDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '500':
          description: Database fail

  /property/type/{id}:
    get:
      operationId: getPropertyType
      tags:
        - Property
      description: Получение типа свойства
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyTypeDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyTypeDto'
        500:
          description: Database fail

  /dictionary:
    post:
      operationId: createDictionary
      tags:
        - Dictionary
      description: Создание справочника
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictionaryDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '500':
          description: Database fail

  /dictionary/{id}:
    get:
      operationId: getDictionary
      tags:
        - Dictionary
      description: Получение значений справочника
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryDto'
        '404':
          description: Not Found
        '500':
          description: Database fail
    put:
      operationId: addDictionaryValue
      tags:
        - Dictionary
      description: Добавление значений в справочник
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
                nullable: false

  /dictionary/{dictionaryId}/{valueId}:
    get:
      operationId: getDictionaryValue
      tags:
        - Dictionary
      description: Получение значения справочника
      parameters:
        - name: dictionaryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: valueId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
        '500':
          description: Database fail

  /insurance:
    post:
      operationId: createInsurance
      tags:
        - Insurance
      description: Создание нового продукта
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '500':
          description: Database fail

  /insurance/{id}:
    get:
      operationId: getInsurance
      tags:
        - Insurance
      description: Получение информации о продукте
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceProductDto'
        '404':
          description: Not Found
        '500':
          description: Database fail
    put:
      operationId: updateInsurance
      tags:
        - Insurance
      description: Редактирование продукта
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsuranceProductDto'
      responses:
        '200':
          description: OK
    delete:
      operationId: deleteInsurance
      tags:
        - Insurance
      description: Удаление продукта
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK

  /rule/{insuranceId}:
    post:
      operationId: createRule
      tags:
        - Rule
      description: Создание правила
      parameters:
        - name: insuranceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '404':
          description: Not Found
        '500':
          description: Database fail

  /rule/{insuranceId}/property/{id}:
    post:
      operationId: addRuleProperty
      tags:
        - Rule
      description: Добавление правила в свойство
      parameters:
        - name: insuranceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PropertyDto'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: Database fail

components:
  schemas:
    PropertyTypeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: false
        description:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      additionalProperties: false

    DictionaryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: false
        dictValues:
          type: array
          items:
            $ref: '#/components/schemas/DictionaryValueDto'
          nullable: false

    DictionaryValueDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        value:
          type: string
          nullable: false

    InsuranceProductDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: false
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDto'
          nullable: false
      additionalProperties: false

    PropertyDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        type:
          $ref: '#/components/schemas/PropertyTypeDto'
        value:
          $ref: '#/components/schemas/ValueDto'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RuleDto'
          nullable: true
      additionalProperties: false

    RuleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        type:
          type: string
          nullable: false
        value:
          type: string
          nullable: false
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDto'
          nullable: false
        targetedProperty:
          $ref: '#/components/schemas/PropertyDto'
      additionalProperties: false

    ValueDto:
      type: object
      properties:
        type:
          type: string
          nullable: false
        value:
          type: string
          nullable: false
      additionalProperties: false
